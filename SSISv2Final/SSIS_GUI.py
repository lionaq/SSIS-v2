# Form implementation generated from reading ui file 'SSIS.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtWidgets, QtGui
from PyQt6.QtWidgets import QVBoxLayout, QLabel, QLineEdit, QComboBox, QDialog, QMessageBox
from PyQt6.QtGui import QIntValidator


def show_error_message(message):
    error_box = QMessageBox()
    error_box.setIcon(QMessageBox.Icon.Critical)
    error_box.setWindowTitle("Error")
    error_box.setText("An error occurred.")
    error_box.setInformativeText(message)
    error_box.exec()

class Ui_SSIS(object):
    def setupUi(self, SSIS):
        SSIS.setObjectName("SSIS")
        SSIS.resize(801, 600)
        SSIS.setMinimumSize(QtCore.QSize(801, 600))
        SSIS.setMaximumSize(QtCore.QSize(801, 600))
        SSIS.setMouseTracking(False)
        SSIS.setStyleSheet("background-color:rgb(34, 40, 49)")
        SSIS.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.centralwidget = QtWidgets.QWidget(parent=SSIS)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 781, 581))
        self.tabWidget.setMaximumSize(QtCore.QSize(800, 600))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.tabWidget.setFont(font)
        self.tabWidget.setStatusTip("")
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setStyleSheet("background-color:rgb(34, 40, 49)")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.tabWidget.setUsesScrollButtons(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.studentTab = QtWidgets.QWidget()
        self.studentTab.setObjectName("studentTab")
        self.studentLineEdit = QtWidgets.QLineEdit(parent=self.studentTab)
        self.studentLineEdit.setGeometry(QtCore.QRect(20, 80, 741, 22))
        self.studentLineEdit.setStyleSheet("background-color: rgb(238, 238, 238)")
        self.studentLineEdit.setText("")
        self.studentLineEdit.setMaxLength(20)
        self.studentLineEdit.setObjectName("studentLineEdit")
        self.deleteButtonStudent = QtWidgets.QPushButton(parent=self.studentTab)
        self.deleteButtonStudent.setGeometry(QtCore.QRect(420, 20, 341, 41))
        self.deleteButtonStudent.setStyleSheet("background-color:rgb(0, 173, 181);\n"
"font: 87 8pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);")
        self.deleteButtonStudent.setObjectName("deleteButtonStudent")
        self.studentTable = QtWidgets.QTableView(parent=self.studentTab)
        self.studentTable.setGeometry(QtCore.QRect(20, 120, 741, 411))
        self.studentTable.setAutoFillBackground(False)
        self.studentTable.setStyleSheet("background-color: rgb(238, 238, 238)")
        self.studentTable.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.studentTable.setObjectName("studentTable")
        headers = ["StudentID", "Name", "Gender", "YearLevel", "CourseCode"]
        self.modelStudent.setHorizontalHeaderLabels(headers)
        self.addButtonStudent = QtWidgets.QPushButton(parent=self.studentTab)
        self.addButtonStudent.setGeometry(QtCore.QRect(20, 20, 341, 41))
        self.addButtonStudent.setStyleSheet("background-color:rgb(0, 173, 181);\n"
"font: 87 8pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);")
        self.addButtonStudent.setObjectName("addButtonStudent")
        self.tabWidget.addTab(self.studentTab, "")
        self.courseTab = QtWidgets.QWidget()
        self.courseTab.setObjectName("courseTab")
        self.courseLineEdit = QtWidgets.QLineEdit(parent=self.courseTab)
        self.courseLineEdit.setGeometry(QtCore.QRect(20, 80, 741, 22))
        self.courseLineEdit.setStyleSheet("background-color: rgb(238, 238, 238)")
        self.courseLineEdit.setText("")
        self.courseLineEdit.setMaxLength(20)
        self.courseLineEdit.setObjectName("courseLineEdit")
        self.addButtonCourse = QtWidgets.QPushButton(parent=self.courseTab)
        self.addButtonCourse.setGeometry(QtCore.QRect(20, 20, 341, 41))
        self.addButtonCourse.setStyleSheet("background-color:rgb(0, 173, 181);\n"
"font: 87 8pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);")
        self.addButtonCourse.setObjectName("addButtonCourse")
        self.deleteButtonCourse = QtWidgets.QPushButton(parent=self.courseTab)
        self.deleteButtonCourse.setGeometry(QtCore.QRect(420, 20, 341, 41))
        self.deleteButtonCourse.setStyleSheet("background-color:rgb(0, 173, 181);\n"
"font: 87 8pt \"Arial Black\";\n"
"color: rgb(255, 255, 255);")
        self.deleteButtonCourse.setObjectName("deleteButtonCourse")
        self.courseTable = QtWidgets.QTableView(parent=self.courseTab)
        self.courseTable.setGeometry(QtCore.QRect(20, 120, 741, 411))
        self.courseTable.setAutoFillBackground(False)
        self.courseTable.setStyleSheet("background-color: rgb(238, 238, 238)")
        self.courseTable.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)
        self.courseTable.setObjectName("courseTable")
        self.tabWidget.addTab(self.courseTab, "")
        SSIS.setCentralWidget(self.centralwidget)

        self.retranslateUi(SSIS)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(SSIS)

    def show_error_message(message):
        error_box = QMessageBox()
        error_box.setIcon(QMessageBox.Icon.Critical)
        error_box.setWindowTitle("Error")
        error_box.setText("An error occurred.")
        error_box.setInformativeText(message)
        error_box.exec()

    def retranslateUi(self, SSIS):
        _translate = QtCore.QCoreApplication.translate
        SSIS.setWindowTitle(_translate("SSIS", "MainWindow"))
        self.studentLineEdit.setPlaceholderText(_translate("SSIS", "Input Student ID For Searching"))
        self.deleteButtonStudent.setText(_translate("SSIS", "DELETE"))
        self.addButtonStudent.setText(_translate("SSIS", "ADD"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.studentTab), _translate("SSIS", "STUDENT"))
        self.courseLineEdit.setPlaceholderText(_translate("SSIS", "Input Course Code For Searching"))
        self.addButtonCourse.setText(_translate("SSIS", "ADD"))
        self.deleteButtonCourse.setText(_translate("SSIS", "DELETE"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.courseTab), _translate("SSIS", "COURSE"))


class studentIdPopUp(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("StudentID Window")
        student_id_label = QLabel("Student ID:")
        self.student_id_line_edit = QLineEdit()
        self.student_id_line_edit.setValidator(QIntValidator())
        self.student_id_line_edit.setPlaceholderText("XXXX-XXXX (input No. Only)")
        self.student_id_line_edit.textEdited.connect(self.add_dash)
        self.student_id_line_edit.setMaxLength(9)


        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        # Create a layout for the input window
        layout = QVBoxLayout()
        self.setLayout(layout)
    
        # Add the labels, line edits, and combo boxes to the layout

        layout.addWidget(student_id_label)
        layout.addWidget(self.student_id_line_edit)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
        
    def add_dash(self, text):
        # Remove any existing dashes from the text
        text = text.replace("-", "")
        # Insert a dash after the 5th character
        if len(text) >= 5:
            text = text[:4] + "-" + text[4:]
            print(len(text))

        # Set the updated text in the line edit
        self.student_id_line_edit.setText(text)

    def return_info(self):
        
        if len(self.student_id_line_edit.text()) >= 1:
            return self.student_id_line_edit.text()
        else:
            show_error_message("BLANK FIELD, TRY AGAIN")
            return 0

class studentNamePopUp(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("Name Window")

        # Create labels
        name_label = QLabel("Name:")
        self.name_line_edit = QLineEdit()
        self.name_line_edit.setMaxLength(80)

        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        # Create a layout for the input window
        layout = QVBoxLayout()
        self.setLayout(layout)
    
        # Add the labels, line edits, and combo boxes to the layout

        layout.addWidget(name_label)
        layout.addWidget(self.name_line_edit)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)

    def return_info(self):      
        if len(self.name_line_edit.text()) >= 1:
            return self.name_line_edit.text()
        else:
            show_error_message("BLANK FIELD, TRY AGAIN")
            return 0

class studentGenderPopUp(QDialog):
    

    def __init__(self):
        super().__init__()

        self.setWindowTitle("Gender Window")
        gender_label = QLabel("Gender:")
        self.gender_combo_box = QComboBox()
        self.gender_combo_box.addItems(["M", "F", "O"])
        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)
        # Create a layout for the input window
        layout = QVBoxLayout()
        self.setLayout(layout)
        layout.addWidget(gender_label)
        layout.addWidget(self.gender_combo_box)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)

    def return_info(self):
        
        return self.gender_combo_box.currentText()

class studentYearPopUp(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("Year Window")
        year_level_label = QLabel("Year Level:")

        # Create combo boxes
        self.year_level_combo_box = QComboBox()
        self.year_level_combo_box.addItems(["1", "2", "3", "4"])

        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        # Create a layout for the input window
        layout = QVBoxLayout()
        self.setLayout(layout)
    
        # Add the labels, line edits, and combo boxes to the layout

        layout.addWidget(year_level_label)
        layout.addWidget(self.year_level_combo_box)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
        

    def return_info(self):
        return self.year_level_combo_box.currentText()
    
class studentCoursePopUp(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("Course Window")

        course_label = QLabel("Course Code:")

        self.course_combo_box = QComboBox()

        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        layout = QVBoxLayout()
        self.setLayout(layout)

        layout.addWidget(course_label)
        layout.addWidget(self.course_combo_box)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
        

    def return_info(self):
        return self.course_combo_box.currentText()

class studentAddWindow(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("ADD Window")

        # Create labels
        name_label = QLabel("Name:")
        student_id_label = QLabel("Student ID:")
        year_level_label = QLabel("Year Level:")
        course_label = QLabel("Course Code:")
        gender_label = QLabel("Gender:")

        # Create line edits
        self.name_line_edit = QLineEdit()
        self.student_id_line_edit = QLineEdit()
        self.student_id_line_edit.setValidator(QIntValidator())
        self.student_id_line_edit.setPlaceholderText("XXXX-XXXX (input No. Only)")
        self.student_id_line_edit.textEdited.connect(self.add_dash)
        self.name_line_edit.setMaxLength(80)
        self.student_id_line_edit.setMaxLength(9)
        

        # Create combo boxes
        self.year_level_combo_box = QComboBox()
        self.year_level_combo_box.addItems(["1", "2", "3", "4"])
        self.course_combo_box = QComboBox()
        self.gender_combo_box = QComboBox()
        self.gender_combo_box.addItems(["M", "F", "O"])

        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        # Create a layout for the input window
        layout = QVBoxLayout()
        self.setLayout(layout)
    
        # Add the labels, line edits, and combo boxes to the layout

        layout.addWidget(student_id_label)
        layout.addWidget(self.student_id_line_edit)
        layout.addWidget(name_label)
        layout.addWidget(self.name_line_edit)
        layout.addWidget(gender_label)
        layout.addWidget(self.gender_combo_box)
        layout.addWidget(year_level_label)
        layout.addWidget(self.year_level_combo_box)
        layout.addWidget(course_label)
        layout.addWidget(self.course_combo_box)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
        
    
    def add_dash(self, text):
        # Remove any existing dashes from the text
        text = text.replace("-", "")
        # Insert a dash after the 5th character
        if len(text) >= 5:
            text = text[:4] + "-" + text[4:]
            print(len(text))

        # Set the updated text in the line edit
        self.student_id_line_edit.setText(text)



    def return_info(self):
        list = [self.student_id_line_edit.text(), self.name_line_edit.text(), self.gender_combo_box.currentText(), int(self.year_level_combo_box.currentText()), self.course_combo_box.currentText()]
        if len(list[4]) < 1:
            show_error_message("NO COURSES AVAILABLE, PLEASE ADD A COURSE")
            return 0
        
        if len(list[0]) >= 1 and len(list[1]) >= 1:
            return list
        else:
            show_error_message("BLANK FIELDS, TRY AGAIN")
            return 0

class courseCodePopUp(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("Course Code Window")

        self.courseCodeLabel = QLabel("Course Code:")

        self.courseCodeLine = QLineEdit()
        self.courseCodeLine.setMaxLength(10)
        
        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        layout = QVBoxLayout()
        self.setLayout(layout)

        layout.addWidget(self.courseCodeLabel)
        layout.addWidget(self.courseCodeLine)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
    
    def return_info(self):
        if self.courseCodeLine.text():
            return self.courseCodeLine.text()
        else:
            show_error_message("BLANK FIELDS, TRY AGAIN")
            return 0
        
class courseLinePopUp(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("Course Window")

        self.courseLabel = QLabel("Course:")

        self.courseLine = QLineEdit()
        self.courseLine.setMaxLength(80)
        
        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        layout = QVBoxLayout()
        self.setLayout(layout)

        layout.addWidget(self.courseLabel)
        layout.addWidget(self.courseLine)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
    
    def return_info(self):
        if self.courseLine.text():
            return self.courseLine.text()
        else:
            show_error_message("BLANK FIELDS, TRY AGAIN")
            return 0
        
class courseAddWindow(QDialog):

    def __init__(self):
        super().__init__()

        self.setWindowTitle("ADD Window")

        # Create labels
        self.courseCodeLabel = QLabel("Course Code:")
        self.courseLabel = QLabel("Course:")

        # Create line edits
        self.courseCodeLine = QLineEdit()
        self.courseLine = QLineEdit()
        self.courseCodeLine.setMaxLength(10)
        self.courseLine.setMaxLength(80)
        
        self.confirm_button = QtWidgets.QPushButton("Confirm")
        self.confirm_button.clicked.connect(self.accept)

        # Create a layout for the input window
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Add the labels, line edits, and combo boxes to the layout
        layout.addWidget(self.courseCodeLabel)
        layout.addWidget(self.courseCodeLine)
        layout.addWidget(self.courseLabel)
        layout.addWidget(self.courseLine)
        layout.addWidget(self.confirm_button)
        self.setLayout(layout)
    
    def return_info(self):
        list = [self.courseCodeLine.text(), self.courseLine.text()]
        if len(list[0]) >= 1 and len(list[1]) >= 1:
            return list
        else:
            show_error_message("BLANK FIELDS, TRY AGAIN")
            return 0